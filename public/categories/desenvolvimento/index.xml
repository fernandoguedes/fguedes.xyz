<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Desenvolvimento on Luís Fernando Guedes</title><link>http://fguedes.xyz/fguedes.xyz/categories/desenvolvimento/</link><description>Recent content in Desenvolvimento on Luís Fernando Guedes</description><generator>Hugo -- gohugo.io</generator><language>en</language><copyright>Copyright © 2008–2019, Steve Francia and the lee.so; all rights reserved.</copyright><lastBuildDate>Fri, 15 Jan 2016 18:31:09 +0000</lastBuildDate><atom:link href="http://fguedes.xyz/fguedes.xyz/categories/desenvolvimento/index.xml" rel="self" type="application/rss+xml"/><item><title>Dica: Vários promises simplificados com o $q no AngularJS</title><link>http://fguedes.xyz/fguedes.xyz/2016/01/15/varios-promises-de-forma-simplificada-no-angularjs/</link><pubDate>Fri, 15 Jan 2016 18:31:09 +0000</pubDate><guid>http://fguedes.xyz/fguedes.xyz/2016/01/15/varios-promises-de-forma-simplificada-no-angularjs/</guid><description>O propósito dessa dica é abordar de forma superficial sobre como disparar diversas chamadas async e aguarda-lás, retornando todas conjuntamente utilizando o $q. Esse tipo de abordagem é útil quando temos uma dezena de microserviços e precisamos fazer alguma ação com o retorno deles de forma conjunta.
O AngularJS por padrão utiliza em suas Promises uma lib que se chama $q, como se trata de um padrão é bem fácil usar a mesma técnica com qualquer outra lib ou até mesmo com a API nativa.</description></item><item><title>Podcasts que todo programador deve (ria) conhecer</title><link>http://fguedes.xyz/fguedes.xyz/2013/10/15/podcasts-que-todo-programador-deve-ria-conhecer/</link><pubDate>Tue, 15 Oct 2013 16:11:42 +0000</pubDate><guid>http://fguedes.xyz/fguedes.xyz/2013/10/15/podcasts-que-todo-programador-deve-ria-conhecer/</guid><description>&lt;p>Todos nós sabemos que devido à nossa rotina diária, acabamos ficando muito tempo parados, seja em um engarrafamento, em uma fila &lt;del>gigantesca&lt;/del> de banco, ou (como no meu caso), esperando ônibus.&lt;/p>
&lt;p>&lt;a href="%7B%7Bsite.url%7D%7D/assets/2013-10-15/podcasts.jpg">&lt;img src="%7B%7Bsite.url%7D%7D/assets/2013-10-15/podcasts.jpg" alt="Podcasts para programadores">&lt;/a>&lt;/p>
&lt;p>Então, por que não ocupar esse seu tempo ouvindo um bate-papo  sobre Desenvolvimento, Software Livre, Empreendedorismo e Agile?&lt;/p>
&lt;p>Separei e listei alguns podcasts que recomendo para quem é da área de Desenvolvimento, deseja Empreender ou aprofundar-se sobre técnicas de Agile.&lt;/p></description></item><item><title>Codificação de arquivos no Linux</title><link>http://fguedes.xyz/fguedes.xyz/2013/09/23/codificacao-de-arquivos-no-linux/</link><pubDate>Mon, 23 Sep 2013 18:31:09 +0000</pubDate><guid>http://fguedes.xyz/fguedes.xyz/2013/09/23/codificacao-de-arquivos-no-linux/</guid><description>Vou iniciar o blog, colocando a resolução de um problema que eu estava enfrentando com projetos com vários programadores utilizando o git como versionamento. Acontece que algumas IDEs estavam codificações diferentes, e quando o arquivo era aberto por outro programador acabava corrompendo tudo. Atrás de uma solução rápida, descobri que a codificação e até mesmo a alteração da codificação de um arquivo pode ser feita via terminal.
Mão na Massa Bom, para saber a codificação de um arquivo basta digitar no terminal:</description></item></channel></rss>